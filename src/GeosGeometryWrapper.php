<?php

namespace Lyhty\Geometry;

/**
 * @method float project(\GEOSGeometry&static $other, bool $normalized = false)
 * @method \GEOSGeometry&static interpolate(float $dist, bool $normalized = false)
 * @method \GEOSGeometry&static buffer(float $dist, array $styleArray = [])
 * @method \GEOSGeometry&static offsetCurve(float $dist, array $styleArray = [])
 * @method \GEOSGeometry&static envelope()
 * @method \GEOSGeometry&static intersection(\GEOSGeometry&static $geom)
 * @method \GEOSGeometry&static convexHull()
 * @method \GEOSGeometry&static difference(\GEOSGeometry&static $geom)
 * @method \GEOSGeometry&static symDifference(\GEOSGeometry&static $geom)
 * @method \GEOSGeometry&static boundary()
 * @method \GEOSGeometry&static union(\GEOSGeometry&static $otherGeom = null)
 * @method \GEOSGeometry&static pointOnSurface()
 * @method \GEOSGeometry&static centroid()
 * @method relate(\GEOSGeometry&static $otherGeom, string $pattern = '') {}
 * @method string relateBoundaryNodeRule(\GEOSGeometry&static $otherGeom, int $rule)
 * @method \GEOSGeometry&static simplify(float $tolerance, bool $preserveTopology = false)
 * @method \GEOSGeometry&static normalize()
 * @method \GEOSGeometry&static extractUniquePoints()
 * @method bool disjoint(\GEOSGeometry&static $geom)
 * @method bool touches(\GEOSGeometry&static $geom)
 * @method bool intersects(\GEOSGeometry&static $geom)
 * @method bool crosses(\GEOSGeometry&static $geom)
 * @method bool within(\GEOSGeometry&static $geom)
 * @method bool contains(\GEOSGeometry&static $geom)
 * @method bool overlaps(\GEOSGeometry&static $geom)
 * @method bool covers(\GEOSGeometry&static $geom)
 * @method bool coveredBy(\GEOSGeometry&static $geom)
 * @method bool equals(\GEOSGeometry&static $geom)
 * @method bool equalsExact(\GEOSGeometry&static $geom, float $tolerance = 0.0)
 * @method bool isEmpty()
 * @method array checkValidity()
 * @method bool isSimple()
 * @method bool isRing()
 * @method bool hasZ()
 * @method bool isClosed()
 * @method string typeName()
 * @method int typeId()
 * @method int getSRID()
 * @method void setSRID(int $srid)
 * @method int numGeometries()
 * @method \GEOSGeometry&static geometryN(int $num)
 * @method int numInteriorRings()
 * @method int numPoints()
 * @method float getX()
 * @method float getY()
 * @method \GEOSGeometry&static interiorRingN(int $num)
 * @method \GEOSGeometry&static exteriorRing()
 * @method int numCoordinates()
 * @method int dimension()
 * @method int coordinateDimension()
 * @method \GEOSGeometry&static pointN(int $num)
 * @method \GEOSGeometry&static startPoint()
 * @method \GEOSGeometry&static endPoint()
 * @method float area()
 * @method float length()
 * @method float distance(\GEOSGeometry&static $geom)
 * @method float hausdorffDistance(\GEOSGeometry&static $geom)
 * @method \GEOSGeometry&static snapTo(\GEOSGeometry&static $geom, float $tolerance)
 * @method \GEOSGeometry&static node()
 * @method \GEOSGeometry&static delaunayTriangulation(float $tolerance = 0.0, bool $onlyEdges = false)
 * @method \GEOSGeometry&static voronoiDiagram(float $tolerance = 0.0, bool $onlyEdges = false, \GEOSGeometry&static $extent = null)
 */
interface GeosGeometryWrapper
{
    //
}
